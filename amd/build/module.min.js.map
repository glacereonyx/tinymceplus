{"version":3,"file":"module.min.js","sources":["../src/module.js"],"sourcesContent":["/* eslint no-unused-vars: 0\n          no-console: 0 */\n\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Functions used to initialize the TinyMCE Plus editor\n *\n * @copyright 2022 Ben Mitchell\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst tinymce = window.tinymce;\nconst YUI = window.YUI;\n\n/**\n * Initializes a TinyMCE editor instance.\n * @param {Array} options\n * @param {Array} foptions\n */\nexport const init_editor = (options, foptions) => {\n\n  // Run extra setup on the editor instance\n  options.setup = (editor) => {\n    editor.fileOptions = foptions;\n  };\n\n  // TODO: Implement the image upload handler.\n  // options.images_upload_handler = image_upload_handler;\n\n  options.file_picker_callback = file_picker_callback;\n  options.file_picker_types = 'image'; // TODO: add media and file\n\n  tinymce.init(options);\n\n};\n\n/**\n * Uses Moodle's AJAX plugin to upload images using a web service.\n * @param {string} blobInfo\n * @param {number} progress\n * @returns {Promise}\n */\nconst image_upload_handler = (blobInfo, progress) => new Promise((resolve, reject) => {\n// TODO: Write an implementation to work around Moodle's filepicker.js popup.\n});\n\n/**\n * Integrates the Moodle's repository/filepicker.js with TinyMCE\n * @param {requestCallback} callback\n * @param {string} value\n * @param {object} meta\n */\nconst file_picker_callback = (callback, value, meta) => {\nconsole.log(typeof value, typeof meta);\nconst fileOptions = tinymce.activeEditor.fileOptions;\n\n  YUI().use('core_filepicker', function (Y) { // Using repository/filepicker.js\n\n  let options = null;\n\n  if (meta.filetype == 'image') {\n    options = fileOptions['image'];\n  }\n\n  options.formcallback = (fileInfo) => {\n    callback(fileInfo.url);\n  };\n\n  // TODO: See if we need this.\n  // options.editor_target = win.document.getElementById(target_id);\n\n  M.core_filepicker.show(Y, options);\n\n});\n};"],"names":["tinymce","window","YUI","options","foptions","setup","editor","fileOptions","file_picker_callback","file_picker_types","init","callback","value","meta","console","log","activeEditor","use","Y","filetype","formcallback","fileInfo","url","M","core_filepicker","show"],"mappings":";;;;;;8FAyBMA,QAAUC,OAAOD,QACjBE,IAAMD,OAAOC,yBAOQ,SAACC,QAASC,UAGnCD,QAAQE,MAAQ,SAACC,QACfA,OAAOC,YAAcH,UAMvBD,QAAQK,qBAAuBA,qBAC/BL,QAAQM,kBAAoB,QAE5BT,QAAQU,KAAKP,cAoBTK,qBAAuB,SAACG,SAAUC,MAAOC,MAC/CC,QAAQC,YAAWH,eAAcC,WAC3BN,YAAcP,QAAQgB,aAAaT,YAEvCL,MAAMe,IAAI,mBAAmB,SAAUC,OAEnCf,QAAU,KAEO,SAAjBU,KAAKM,WACPhB,QAAUI,YAAW,OAGvBJ,QAAQiB,aAAe,SAACC,UACtBV,SAASU,SAASC,MAMpBC,EAAEC,gBAAgBC,KAAKP,EAAGf"}